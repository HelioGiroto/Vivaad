<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.8/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.8/ http://www.mediawiki.org/xml/export-0.8.xsd" version="0.8" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <base>http://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.21wmf3</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Bellman equation</title>
    <ns>0</ns>
    <id>1236458</id>
    <revision>
      <id>520927458</id>
      <parentid>513575935</parentid>
      <timestamp>2012-11-01T17:49:24Z</timestamp>
      <contributor>
        <ip>79.11.137.9</ip>
      </contributor>
      <comment>/* Solution methods */ approximate dynamic programming (neuro dynamic programming)</comment>
      <text xml:space="preserve" bytes="16815">A '''Bellman equation''' (also known as a '''dynamic programming equation'''), named after its discoverer, [[Richard Bellman]], is a [[necessary condition]] for optimality associated with the mathematical [[Optimization (mathematics)|optimization]] method known as [[dynamic programming]]. It writes the value of a decision problem at a certain point in time in terms of the payoff from some initial choices and the value of the remaining decision problem that results from those initial choices. This breaks a dynamic optimization problem into simpler subproblems, as Bellman's '''Principle of Optimality''' prescribes.

The Bellman equation was first applied to engineering [[control theory]] and to other topics in applied mathematics, and subsequently became an important tool in [[economic theory]].

Almost any problem which can be solved using [[optimal control theory]] can also be solved by analyzing the appropriate Bellman equation. However, the term 'Bellman equation' usually refers to the dynamic programming equation associated with [[discrete-time]] optimization problems. In continuous-time optimization problems, the analogous equation is a [[partial differential equation]] which is usually called the [[Hamilton-Jacobi-Bellman equation]].

== Analytical concepts in dynamic programming ==
To understand the Bellman equation, several underlying concepts must be understood. First, any optimization problem has some objective--- minimizing travel time, minimizing cost, maximizing profits, maximizing utility, et cetera. The mathematical function that describes this objective is called the '''[[Optimization (mathematics)#Optimization problems|objective function]]'''.

Dynamic programming breaks a multi-period planning problem into simpler steps at different points in time. Therefore, it requires keeping track of how the decision situation is evolving over time. The information about the current situation which is needed to make a correct decision is called the '''state''' (See Bellman, 1957, Ch. III.2).&lt;ref name=BellmanDP&gt;Bellman, R.E. 1957. ''Dynamic Programming''. Princeton University Press, Princeton, NJ. Republished 2003: Dover, ISBN 0-486-42809-5.&lt;/ref&gt;&lt;ref name=dreyfus&gt;S. Dreyfus (2002), [http://www.wu-wien.ac.at/usr/h99c/h9951826/bellman_dynprog.pdf 'Richard Bellman on the birth of dynamic programming'] ''Operations Research'' 50 (1), pp. 48-51.&lt;/ref&gt; For example, to decide how much to consume and spend at each point in time, people would need to know (among other things) their initial wealth. Therefore, wealth would be one of their '''[[state variable]]s''', but there would probably be others.

The variables chosen at any given point in time are often called the '''[[control variable]]s'''. For example, given their current wealth, people might decide how much to consume now. Choosing the control variables now may be equivalent to choosing the next state; more generally, the next state is affected by other factors in addition to the current control. For example, in the simplest case, today's wealth (the state) and consumption (the control) might exactly determine tomorrow's wealth (the new state), though typically other factors will affect tomorrow's wealth too.

The dynamic programming approach describes the optimal plan by finding a rule that tells what the controls should be, given any possible value of the state. For example, if consumption (''c'') depends ''only'' on wealth (''W''), we would seek a rule  &lt;math&gt;c(W)&lt;/math&gt; that gives consumption as a function of wealth. Such a rule, determining the controls as a function of the states, is called a '''policy function''' (See Bellman, 1957, Ch. III.2).&lt;ref name=BellmanDP /&gt;

Finally, by definition, the optimal decision rule is the one that achieves the best possible value of the objective. For example, if someone chooses consumption, given wealth, in order to maximize happiness (assuming happiness ''H'' can be represented by a mathematical function, such as a [[utility]] function), then each level of wealth will be associated with some highest possible level of happiness, &lt;math&gt;H(W)&lt;/math&gt;. The best possible value of the objective, written as a function of the state, is called the '''value function'''.

[[Richard Bellman]] showed that a dynamic [[Optimization (mathematics)|optimization]] problem in [[discrete time]] can be stated in a [[recursion|recursive]], step-by-step form by writing down the relationship between the value function in one period and the value function in the next period. The relationship between these two value functions is called the '''Bellman equation'''.

== Deriving the Bellman equation ==
=== A dynamic decision problem ===
Let the state at time &lt;math&gt;t&lt;/math&gt; be &lt;math&gt;x_t&lt;/math&gt;. For a decision that begins at time 0, we take as given the initial state &lt;math&gt;x_0&lt;/math&gt;. At any time, the set of possible actions depends on the current state; we can write this as &lt;math&gt; a_{t} \in \Gamma (x_t)&lt;/math&gt;, where the action &lt;math&gt;a_t&lt;/math&gt; represents one or more control variables. We also assume that the state changes from &lt;math&gt;x&lt;/math&gt; to a new state &lt;math&gt;T(x,a)&lt;/math&gt; when action &lt;math&gt;a&lt;/math&gt; is taken, and that the current payoff from taking action &lt;math&gt;a&lt;/math&gt; in state &lt;math&gt;x&lt;/math&gt; is &lt;math&gt;F(x,a)&lt;/math&gt;. Finally, we assume impatience, represented by a [[discount factor]] &lt;math&gt;0&lt;\beta&lt;1&lt;/math&gt;. 

Under these assumptions, an infinite-horizon decision problem takes the following form:

:&lt;math&gt; V(x_0) \; = \; \max_{ \left \{ a_{t} \right \}_{t=0}^{\infty} }  \sum_{t=0}^{\infty} \beta^t F(x_t,a_{t}), &lt;/math&gt;

subject to the constraints
 
:&lt;math&gt; a_{t} \in \Gamma (x_t), \; x_{t+1}=T(x_t,a_t), \; \forall t = 0, 1, 2, \dots &lt;/math&gt;

Notice that we have defined notation &lt;math&gt;V(x_0)&lt;/math&gt; to represent the optimal value that can be obtained by maximizing this objective function subject to the assumed constraints. This function is the ''value function''. It is a function of the initial state variable &lt;math&gt;x_0 &lt;/math&gt;, since the best value obtainable depends on the initial situation.

=== Bellman's Principle of Optimality ===
The dynamic programming method breaks this decision problem into smaller subproblems. Richard Bellman's '''Principle of Optimality''' describes how to do this:&lt;blockquote&gt;Principle of Optimality: An optimal policy has the property that whatever the initial state and initial decision are, the remaining decisions must constitute an optimal policy with regard to the state resulting from the first decision. (See Bellman, 1957, Chap. III.3.)&lt;ref name=BellmanDP /&gt;&lt;ref name=dreyfus /&gt;&lt;ref name=BellmanTheory&gt;R Bellman, ''On the Theory of Dynamic Programming'', Proceedings of the National Academy of Sciences, 1952&lt;/ref&gt;&lt;/blockquote&gt;
In computer science, a problem that can be broken apart like this is said to have [[optimal substructure]]. In the context of dynamic [[game theory]], this principle is analogous to the concept of [[subgame perfect equilibrium]], although what constitutes an optimal policy in this case is conditioned on the decision-maker's opponents choosing similarly optimal policies from their points of view.

As suggested by the Principle of Optimality, we will consider the first decision separately, setting aside all future decisions (we will start afresh from time 1 with the new state &lt;math&gt;x_1 &lt;/math&gt;). Collecting the future decisions in brackets on the right, the previous problem is equivalent to:

:&lt;math&gt; \max_{ a_0 } \left \{ F(x_0,a_0) 
+ \beta  \left[ \max_{ \left \{ a_{t} \right \}_{t=1}^{\infty} } 
\sum_{t=1}^{\infty} \beta^{t-1} F(x_t,a_{t}) \; \; s.t. \; \; 
a_{t} \in \Gamma (x_t), \; x_{t+1}=T(x_t,a_t), \; \forall t = 1, 2, \dots \right] \right \}&lt;/math&gt;

subject to the constraints
 
:&lt;math&gt; a_0 \in \Gamma (x_0), \; x_1=T(x_0,a_0). &lt;/math&gt;

Here we are choosing &lt;math&gt;a_0&lt;/math&gt;, knowing that our choice will cause the time 1 state to be &lt;math&gt;x_1=T(x_0,a_0)&lt;/math&gt;. That new state will then affect the decision problem from time 1 on. The whole future decision problem appears inside the square brackets on the right.

=== The Bellman equation ===
So far it seems we have only made the problem uglier by separating today's decision from future decisions. But we can simplify by noticing that what is inside the square brackets on the right is ''the value'' of the time 1 decision problem, starting from state &lt;math&gt;x_1=T(x_0,a_0)&lt;/math&gt;.

Therefore we can rewrite the problem as a [[Recursion|recursive]] definition of the value function:

:&lt;math&gt;V(x_0) = \max_{ a_0 } \{ F(x_0,a_0) + \beta V(x_1) \} &lt;/math&gt;, subject to the constraints: &lt;math&gt; a_0 \in \Gamma (x_0), \; x_1=T(x_0,a_0). &lt;/math&gt;

This is the Bellman equation. It can be simplified even further if we drop time subscripts and plug in the value of the next state:

:&lt;math&gt;V(x) = \max_{a \in \Gamma (x) } \{ F(x,a) + \beta V(T(x,a)) \}.&lt;/math&gt;

The Bellman equation is classified as a [[functional equation]], because solving it means finding the unknown function ''V'', which is the ''value function''. Recall that the value function describes the best possible value of the objective, as a function of the state ''x''. By calculating the value function, we will also find the function ''a''(''x'') that describes the optimal action as a function of the state; this is called the ''policy function''.

=== The Bellman equation in a stochastic problem ===
{{See also|Markov Decision Process}}
Dynamic programming can be especially useful in [[stochastic processes|stochastic]] decisions, that is, optimization problems affected by random events. For example, consider a problem exactly like the one discussed above, except that &lt;math&gt;x_{t+1}&lt;/math&gt; is a random variable, which may be influenced by &lt;math&gt;x_t&lt;/math&gt; and &lt;math&gt;a_t&lt;/math&gt;, but is not determined by them exactly. We can describe this case by defining the [[Cumulative distribution function|probability distribution]] conditional on &lt;math&gt;x_t&lt;/math&gt; and &lt;math&gt;a_t&lt;/math&gt;, for example, 

:&lt;math&gt;G(y|x,a) = {\rm prob}(x_{t+1}\leq y|x_t=x,a_t=a)&lt;/math&gt;

Given this probability law determining &lt;math&gt;x_{t+1}&lt;/math&gt; conditional on &lt;math&gt;x_t&lt;/math&gt; and &lt;math&gt;a_t&lt;/math&gt;, the Bellman equation can be written as

:&lt;math&gt;V(x) = \max_{a \in \Gamma (x) } \left \{F(x,a) + \beta E_G [V(y)|x,a] \right \},&lt;/math&gt;

where &lt;math&gt;E_G&lt;/math&gt; represents a [[conditional expectation]] under distribution ''G''.

==Solution methods==

*The [[method of undetermined coefficients]], also known as 'guess and verify', can be used to solve some infinite-horizon, [[Autonomous system (mathematics)|autonomous]] Bellman equations.

*The Bellman equation can be solved by [[backwards induction]], either [[Closed-form expression|analytically]] in a few special cases, or [[numerical analysis|numerically]] on a computer. Numerical backwards induction is applicable to a wide variety of problems, but may be infeasible when there are many state variables, due to the [[curse of dimensionality]]. Approximate dynamic programming has been introduced by [[Dimitri Bertsekas|D. P. Bertsekas]] and J. N. Tsitsiklis with the use of [[artificial neural network]]s ([[multilayer perceptron]]s) for approximating the Bellman function&lt;ref name=&quot;NeuroDynProg&quot;&gt;Bertsekas, D. P., Tsitsiklis, J. N., ''Neuro-dynamic programming''. Athena Scientific, 1996&lt;/ref&gt;. This is an effective mitigation strategy for reducing the impact of dimensionality by replacing the memorization of the complete function mapping for the whole space domain with the memorization of the sole neural network parameters. 

*By calculating the first-order conditions associated with the Bellman equation, and then using the [[envelope theorem]] to eliminate the derivatives of the value function, it is possible to obtain a system of [[difference equation]]s or [[differential equation]]s called the '[[Euler-Lagrange equation|Euler equation]]s'. Standard techniques for the solution of difference or differential equations can then be used to calculate the dynamics of the state variables and the control variables of the optimization problem.

==Applications in economics==
The first known application of a Bellman equation in economics is due to Martin Beckmann and Richard Muth.&lt;ref&gt;Martin Beckmann and Richard Muth, 1954, &quot;On the solution to the fundamental equation of inventory theory,&quot; ''Cowles Commission Discussion Paper'' 2116.&lt;/ref&gt; Martin Beckmann also wrote extensively on consumption theory using the Bellman equation in 1959. His work influenced [[Edmund S. Phelps]], among others.

A celebrated economic application of a Bellman equation is Merton's seminal 1973 article on the [[ICAPM|intertemporal capital asset pricing model]].&lt;ref&gt;[[Robert C. Merton]], 1973, &quot;An Intertemporal Capital Asset Pricing Model,&quot; ''Econometrica 41'': 867-887.&lt;/ref&gt; (See also [[Merton's portfolio problem]]).The solution to Merton's theoretical model, one in which investors chose between income today and future income or capital gains, is a form of Bellman's equation. Because economic applications of dynamic programming usually result in a Bellman equation that is a [[difference equation]], economists refer to dynamic programming as a &quot;recursive method.&quot; 

Stokey, Lucas &amp; Prescott describe stochastic and nonstochastic dynamic programming in considerable detail, giving many examples of how to employ dynamic programming to solve problems in economic theory.&lt;ref&gt;*[[Nancy Stokey]], and [[Robert E. Lucas]], with [[Edward Prescott]], 1989. ''Recursive Methods in Economic Dynamics''. Harvard Univ. Press.&lt;/ref&gt; This book led to dynamic programming being employed to solve a wide range of theoretical problems in economics, including optimal [[economic growth]], [[resource extraction]], [[principal–agent problem]]s, [[public finance]], business [[investment]], [[asset pricing]], [[factor of production|factor]] supply, and [[industrial organization]]. Ljungqvist &amp; Sargent apply dynamic programming to study a variety of theoretical questions in [[monetary policy]], [[fiscal policy]], [[taxation]], [[economic growth]], [[search theory]], and [[labor economics]].&lt;ref&gt;[[Lars Ljungqvist]] &amp; [[Thomas Sargent]], 2004. ''Recursive Macroeconomic Theory''. MIT Press.&lt;/ref&gt; Dixit &amp; Pindyck showed the value of the method for thinking about [[capital budgeting]].&lt;ref&gt;[[Avinash Dixit]] &amp; Robert Pindyck, 1994. ''Investment Under Uncertainty''. Princeton Univ. Press.&lt;/ref&gt; Anderson adapted the technique to business valuation, including privately-held businesses.&lt;ref&gt;Anderson, Patrick L., Business Economics &amp; Finance, CRC Press, 2004, ISBN 1-58488-348-0; The Value of Private Businesses in the United States, Business Economics (2009) 44, 87–108. {{doi|10.1057/be.2009.4}}.&lt;/ref&gt;

Using dynamic programming to solve concrete problems is complicated by informational difficulties, such as choosing the unobservable discount rate. There are also computational issues, the main one being the [[curse of dimensionality]] arising from the vast number of possible actions and potential state variables that must be considered before an optimal strategy can be selected. For an extensive discussion of computational issues, see Miranda &amp; Fackler.,&lt;ref&gt;Miranda, M., &amp; Fackler, P., 2002. ''Applied Computational Economics and Finance''. MIT Press&lt;/ref&gt; and Meyn 2007&lt;ref&gt;S. P. Meyn, 2007.  [http://decision.csl.uiuc.edu/~meyn/pages/CTCN/CTCN.html Control Techniques for Complex Networks], Cambridge University Press, 2007.  Appendix contains abridged [http://decision.csl.uiuc.edu/~meyn/pages/book.html Meyn &amp; Tweedie].&lt;/ref&gt;

== Example ==
In [[Markov decision process|MDP]], a Bellman equation refers to a [[recursion]] for expected rewards. For example, the expected reward for being in a particular state ''s'' and following some fixed policy &lt;math&gt;\pi&lt;/math&gt; has the Bellman equation:

:&lt;math&gt; V^\pi(s)= R(s) + \gamma \sum_{s'} P(s'|s,\pi(s)) V^\pi(s').\ &lt;/math&gt;

This equation describes the expected reward for taking the action prescribed by some policy &lt;math&gt;\pi&lt;/math&gt;.

The equation for the optimal policy is referred to as the ''Bellman optimality equation'':

:&lt;math&gt; V^*(s)= R(s) + \max_a \gamma \sum_{s'} P(s'|s,a) V^*(s').\ &lt;/math&gt;

It describes the reward for taking the action giving the highest expected return.

==See also==
* [[Dynamic programming]]
* [[Hamilton-Jacobi-Bellman equation]]
* [[Markov decision process]]
* [[Optimal control theory]]
* [[Optimal substructure]]
* [[Recursive competitive equilibrium]]
* [[Bellman pseudospectral method]]

== References ==
{{Reflist}}

{{DEFAULTSORT:Bellman Equation}}
[[Category:Mathematical optimization]]
[[Category:Equations]]
[[Category:Dynamic programming]]
[[Category:Control theory]]

[[de:Optimalitätsprinzip von Bellman]]
[[fa:معادله بلمن]]
[[he:משוואות בלמן]]
[[ru:Уравнение Беллмана]]</text>
      <sha1>mohmttpoequd76jhn2u9d2erorl7nin</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
</mediawiki>
